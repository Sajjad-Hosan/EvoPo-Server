    app.patch("/update", async (req, res) => {
      const user = req.body;
      const type = req.query.type;
      console.log(user);
      const exist = await userCollection.findOne({ email: user?.email });
      if (exist) {
        if (type === "logout") {
          const update = {
            $set: {
              logoutTime: user?.logoutTime,
              logoutDate: user?.logoutDate,
            },
          };
          const result = await userCollection.updateOne(
            { email: user?.email },
            update
          );
          return res.send({ message: "success", result });
        } else if (type === "login") {
          const update = {
            $set: {
              loginTime: user?.loginTime,
              LoginDate: user?.LoginDate,
            },
          };
          const result = await userCollection.updateOne(
            { email: user?.email },
            update
          );
          return res.send({ message: "success", result });
        }
        return res.send({ message: "error" });
      }
    });
    //
    app.get("/product-count", async (req, res) => {
      const count = await productCollection.estimatedDocumentCount();
      res.send({ count });
    });
    app.post("/products", async (req, res) => {
      const page = Number(req.query?.page);
      const item = Number(req.query?.item);
      //
      const search = req.query?.search;
      const category = req.query?.category;
      const sort = req.query?.sort;
      const sortObject = {};
      if (category) {
        sortObject[category] = 1;
      }
      if (sort === "new") {
        sortObject.creation_date - 1;
      } else if (sort === "low") {
        sortObject.price = 1;
      } else if (sort === "high") {
        sortObject.price = -1;
      } else {
        sortObject.category = 1;
      }
      if (!search == " ") {
        const result = await productCollection
          .find({ name: { $regex: search } })
          .sort(sortObject)
          .skip(page * item)
          .limit(item)
          .toArray();
        res.send(result);
        return;
      }
      const result = await productCollection
        .find()
        .sort(sortObject)
        .skip(page * item)
        .limit(item)
        .toArray();
      res.send(result);
    });
    app.get("/product/:id", async (req, res) => {
      const filter = { _id: new ObjectId(req.params.id) };
      console.log(filter);
      const result = await productCollection.findOne(filter);
      res.send(result);
    });